class Solution {
    public boolean isPalindrome(String s) {
        
        // Step 1: Remove all non-alphanumeric characters using regex
        // [^a-zA-Z0-9]+ → matches one or more characters that are NOT letters or digits
        // Replace them with "" (empty string) to effectively remove them
        s = s.replaceAll("[^a-zA-Z0-9]+", "");

        // Step 2: Convert entire string to lowercase for case-insensitive comparison
        s = s.toLowerCase();

        // Step 3: Use two-pointer technique to check if string is palindrome
        int n = s.length();
        for (int i = 0; i < n / 2; i++) {
            // Compare ith character from start with ith character from end
            if (s.charAt(i) != s.charAt(n - i - 1)) {
                return false; // mismatch found → not palindrome
            }
        }

        // If loop finishes without mismatch → string is palindrome
        return true; 
    }
}



basic palindrome chacking:-
class Solution {
    public boolean isPalindrome(String s) {
        int n = s.length();

        // Compare characters from start and end
        for (int i = 0; i < n / 2; i++) {
            if (s.charAt(i) != s.charAt(n - i - 1)) {
                return false; // mismatch found
            }
        }
        return true; // all matched
    }
}
