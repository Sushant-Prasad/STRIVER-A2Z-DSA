class Solution {
    public int reverse(int x) {
        int reverseNo = 0;

        while (x != 0) {
            int digit = x % 10;

            // Check for overflow/underflow before multiplying by 10
            if (reverseNo > Integer.MAX_VALUE / 10 || reverseNo < Integer.MIN_VALUE / 10) {
                return 0;
            }

            reverseNo = reverseNo * 10 + digit;
            x /= 10;
        }

        return reverseNo;
    }
}

Concept:- I
1) integer. MAX_VALUE represents the maximum positive integer value that can be represented in 32 bits (i.e., 2147483647 )

⚠️ Overflow/Underflow Check:
if (reverseNo > Integer.MAX_VALUE / 10 || reverseNo < Integer.MIN_VALUE / 10)
Prevents overflow and underflow.

Why check this?

Multiplying reverseNo by 10 could exceed the limit of 32-bit signed integers ([-2,147,483,648 to 2,147,483,647]).

If it will overflow, return 0 immediately as required by the problem.
