//link:-https://leetcode.com/problems/binary-tree-preorder-traversal/description/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

import java.util.*;

class Solution {
    /**
     * Helper function to perform preorder traversal.
     * Preorder traversal order: Root → Left → Right
     *
     * @param root The current node in the binary tree
     * @param list The result list storing preorder traversal
     */
    private void preorder(TreeNode root, List<Integer> list) {
        // Base case: If the node is null, return
        if (root == null) return;

        // Step 1: Visit the root node
        list.add(root.val);

        // Step 2: Traverse the left subtree
        preorder(root.left, list);

        // Step 3: Traverse the right subtree
        preorder(root.right, list);
    }

    /**
     * Main function to get preorder traversal of a binary tree.
     *
     * @param root The root node of the binary tree
     * @return List of integers representing preorder traversal
     */
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        
        // Call helper function starting from the root
        preorder(root, result);

        // Return the final preorder traversal list
        return result;
    }
}
