/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

import java.util.*;

class Solution {
    /**
     * Function to perform level-order traversal (BFS) of a binary tree.
     * Traversal order: Level by level from top to bottom.
     *
     * @param root The root node of the binary tree
     * @return A list of levels, where each level is a list of node values
     */
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();

        // Base case: if tree is empty
        if (root == null) return result;

        // Queue for BFS traversal
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        // Standard BFS loop
        while (!q.isEmpty()) {
            int size = q.size();              // Number of nodes in current level
            ArrayList<Integer> level = new ArrayList<>(); // Stores current level

            // Process all nodes of this level
            for (int i = 0; i < size; i++) {
                TreeNode currNode = q.poll(); // Remove front node from queue
                level.add(currNode.val);      // Add node value to current level

                // Add left child to queue if exists
                if (currNode.left != null) {
                    q.add(currNode.left);
                }

                // Add right child to queue if exists
                if (currNode.right != null) {
                    q.add(currNode.right);
                }
            }

            // Add this level to the result
            result.add(level);
        }

        return result;
    }
}
