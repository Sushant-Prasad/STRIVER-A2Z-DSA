/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    /**
     * Title: Maximum Depth of a Binary Tree
     *
     * @param root Root node of the binary tree
     * @return The maximum depth (or height) of the binary tree
     *
     * Approach:
     * ---------
     * - Use recursion (DFS).
     * - For each node:
     *    1. Compute the maximum depth of its left subtree.
     *    2. Compute the maximum depth of its right subtree.
     *    3. Take the maximum of both and add 1 (for the current node).
     *
     * - Base case: if the node is null → depth = 0.
     *
     * Example:
     * --------
     * Input Tree:
     *        1
     *       / \
     *      2   3
     *     /
     *    4
     *
     * Left depth (via 2 → 4) = 2
     * Right depth (via 3) = 1
     * Total depth = 1 (root) + max(2,1) = 3
     *
     * Output: 3
     *
     * Time Complexity: O(n)  
     *   - Each node is visited once.
     *
     * Space Complexity: O(h)  
     *   - h = height of tree (recursion stack).
     *   - Worst case O(n) for a skewed tree, O(log n) for a balanced tree.
     */
    public int maxDepth(TreeNode root) {
        // Base case: empty tree has depth 0
        if (root == null) return 0;

        // Recursively compute depth of left and right subtrees
        int leftHeight = maxDepth(root.left);
        int rightHeight = maxDepth(root.right);

        // Current node's depth = 1 (itself) + max depth of children
        int selfHeight = Math.max(leftHeight, rightHeight) + 1;

        return selfHeight;
    }
}
