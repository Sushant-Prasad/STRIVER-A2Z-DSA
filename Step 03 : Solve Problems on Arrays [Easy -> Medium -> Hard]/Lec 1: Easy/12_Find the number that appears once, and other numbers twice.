/*
link:-https://leetcode.com/problems/single-number/description/
Title: Single Number
--------------------
Given a non-empty array of integers `nums`, every element appears twice except for one.  
Find that single number.

You must implement a solution with linear runtime complexity and use only constant extra space.

Example:
--------
Input:  nums = [4, 1, 2, 1, 2]
Output: 4
Explanation:
All numbers appear twice except 4, which appears only once.

Approach (Using Bit Manipulation - XOR):
----------------------------------------
1. Initialize a variable `result = 0`.
2. Traverse the array:
   - Perform XOR operation between `result` and each element.
   - Properties of XOR:
       - x ^ x = 0  (a number XOR itself is zero)
       - x ^ 0 = x  (a number XOR zero is the number itself)
   - Hence, all duplicate numbers cancel out, leaving only the unique one.
3. Return the final `result`.

Example walkthrough:
--------------------
nums = [4, 1, 2, 1, 2]
result = 0
Step 1: 0 ^ 4 = 4
Step 2: 4 ^ 1 = 5
Step 3: 5 ^ 2 = 7
Step 4: 7 ^ 1 = 6
Step 5: 6 ^ 2 = 4
Final Answer = 4

Time Complexity:  O(n)
   - The array is traversed once.

Space Complexity: O(1)
   - Only one variable is used.
*/

class Solution {
    public int singleNumber(int[] nums) {
        int result = 0; // Holds the unique number after all XOR operations
        
        // XOR all elements; duplicates cancel each other out
        for (int i = 0; i < nums.length; i++) {
            result = result ^ nums[i];
        }
        
        return result; // The remaining number is the unique one
    }
}
