//link:-https://leetcode.com/problems/move-zeroes/

class Solution {
    /**
     * Moves all zeroes in the array to the end while maintaining
     * the relative order of non-zero elements.
     *
     * @param nums Input array of integers
     *
     * Approach:
     * ---------
     * 1. Use two pointers:
     *    - `i` → scans every element of the array
     *    - `j` → position where the next non-zero should be placed
     *
     * 2. Traverse the array:
     *    - If nums[i] != 0:
     *        → Swap nums[i] with nums[j] (if i != j)
     *        → Increment j
     *
     * 3. By the end:
     *    - All non-zero elements are shifted to the front in their
     *      original order.
     *    - All zeroes are pushed to the end.
     *
     * Example:
     * --------
     * nums = [0,1,0,3,12]
     * Step 1: Swap 1 with 0 → [1,0,0,3,12]
     * Step 2: Swap 3 with 0 → [1,3,0,0,12]
     * Step 3: Swap 12 with 0 → [1,3,12,0,0]
     *
     * Final Output: [1,3,12,0,0]
     *
     * Time Complexity: O(n) → single traversal
     * Space Complexity: O(1) → in-place
     */
    public void moveZeroes(int[] nums) {
        int n = nums.length;
        if (n <= 1) return; // no operation needed

        int j = 0; // index where next non-zero should be placed

        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                // Swap nums[i] with nums[j] only if they are different positions
                if (i != j) {
                    int temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
                j++; // move j forward for next non-zero
            }
        }
    }
}
